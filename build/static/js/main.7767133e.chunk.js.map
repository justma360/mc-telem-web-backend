{"version":3,"sources":["hooks/useMqttClient.ts","utils/transformArduinoData.ts","pages/Home/Home.tsx","pages/ReduxSample/duck/action.ts","pages/ReduxSample/duck/selector.ts","pages/ReduxSample/ReduxSample.tsx","pages/ReduxAPISample/duck/action.ts","pages/ReduxAPISample/duck/selector.ts","pages/ReduxAPISample/ReduxAPISample.tsx","router/index.tsx","pages/ReduxSample/duck/reducer.ts","pages/ReduxAPISample/duck/reducer.ts","api/axios.ts","api/index.ts","pages/ReduxAPISample/duck/saga.ts","pages/ReduxAPISample/index.ts","store/reducer.ts","store/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useMqttClient","protocol","host","port","topic","useState","client","setClient","connectStatus","setConnectStatus","payload","setPayload","useEffect","mqttClient","mqtt","connect","on","end","subscribe","_","message","toString","transformArduinoData","data","numberData","split","map","item","parseFloat","angleX","angleY","angleZ","gpsLat","gpsLong","gpsSpeed","tyreTemp","time","Date","getTime","Home","dataArr","setDataArr","dataArray","now","arduinoData","SET_TEXT","selectText","createSelector","state","text","dispatch","setText","action","Actions","input","setInput","onChange","e","target","value","type","onClick","FETCH_DATAS","FETCH_DATAS_SUCCESS","FETCH_DATAS_FAIL","selectDatasData","datas","fetchDatas","window","scrollTo","exact","path","component","ReduxSample","ReduxAPISample","initialState","instance","axios","create","baseURL","timeout","headers","get","then","res","handleFetchDatas","watchFetchDatas","call","put","error","takeLatest","DatasActions","DatasSaga","all","combineReducers","SettingsActions","rootSaga","sagaMiddleware","createSagaMiddleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","run","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+VA4DeA,EA1CO,SAAC,GAES,IAD/BC,EAC8B,EAD9BA,SAAUC,EACoB,EADpBA,KAAMC,EACc,EADdA,KAAMC,EACQ,EADRA,MAEtB,EAA4BC,mBAA4B,MAAxD,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA0CF,mBAAS,WAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAA8BJ,mBAAwB,MAAtD,mBAAOK,EAAP,KAAgBC,EAAhB,KA8BA,OA5BAC,qBAAU,WACT,IAAMC,EAAaC,IAAKC,QAAL,UAAgBd,EAAhB,cAA8BC,EAA9B,YAAsCC,IACzDI,EAAUM,KACR,IAEHD,qBAAU,WACT,GAAIN,EAAQ,CAEXA,EAAOU,GAAG,WAAW,WACpBP,EAAiB,aACE,KAEpBH,EAAOU,GAAG,SAAS,WAClBV,EAAOW,OACa,KAErBX,EAAOU,GAAG,aAAa,WACtBP,EAAiB,gBACE,KAEpBH,EAAOY,UAAUd,GACjBE,EAAOU,GAAG,WAAW,SAACG,EAAGC,GACpBV,IAAYU,EAAQC,YACxBV,EAAWS,EAAQC,kBAGnB,CAACf,IAEG,CACNE,gBACAE,UACAJ,WCnCagB,EAnBqB,SAACC,GAEpC,IAAMC,EAAaD,EAAKE,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAUC,WAAWD,MAc5D,MAXiC,CAChCE,OAAQL,EAAW,GACnBM,OAAQN,EAAW,GACnBO,OAAQP,EAAW,GACnBQ,OAAQR,EAAW,GACnBS,QAAST,EAAW,GACpBU,SAAUV,EAAW,GACrBW,SAAUX,EAAW,GACrBY,MAAM,IAAIC,MAAOC,Y,OCsCJC,EAhDF,WACZ,MAA8BlC,mBAAwB,IAAtD,mBAAOmC,EAAP,KAAgBC,EAAhB,KAIMC,EAFW,mEAEUjB,MAAM,KAajC,GAVOY,KAAKM,MACFD,EAAU,GACVA,EAAU,GACVA,EAAU,GACVA,EAAU,GACVA,EAAU,GACRA,EAAU,GACVA,EAAU,GAGa1C,EAAc,CAChDE,KAAM,eACND,SAAU,MACVE,KAAM,KACNC,MAAO,sBAJAI,EAAR,EAAQA,cAAeE,EAAvB,EAAuBA,QAcvB,OAPAE,qBAAU,WACT,GAAIF,EAAS,CACZ,IAAMkC,EAActB,EAAqBZ,GACzC+B,EAAW,GAAD,mBAAKD,GAAL,CAAcI,QAEvB,CAAClC,IAGH,qCACC,yCAGEF,KAEF,0CAEEE,S,QCvCQmC,EAAW,oB,QCDXC,EAAaC,aAFI,SAACC,GAAD,OAA6BA,EAAMC,QAIhE,SAAC1B,GAAD,OAAUA,EAAK0B,QCsCDlC,eARS,SAACiC,GAAD,MAAuB,CAC9CC,KAAMH,EAAWE,OAGS,SAACE,GAAD,MAAyB,CACnDC,QAAS,SAACF,GAAD,OAAkBC,EFlCL,SAACD,GAAD,OAA8BG,iBAAOP,EAAU,CAAEI,SEkCnCI,CAAgBJ,QAGtClC,EAlCK,SAAC,GAA8B,IAA5BoC,EAA2B,EAA3BA,QAASF,EAAkB,EAAlBA,KAC/B,EAA0B5C,mBAAS,IAAnC,mBAAOiD,EAAP,KAAcC,EAAd,KAUA,OACC,gCACC,8CACA,+CAEEN,KAEF,uBAAOO,SAfiB,SAACC,GAC1BF,EAASE,EAAEC,OAAOC,QAcmBC,KAAK,SACzC,wBAAQA,KAAK,SAASC,QAZJ,WACnBV,EAAQG,IAWP,sCCrBUQ,EAAc,oBACdC,EAAsB,4BACtBC,EAAmB,yBCNnBC,EAAkBlB,aAFJ,SAACC,GAAD,OAA6BA,EAAMkB,SAI7D,SAACA,GAAD,OAAWA,EAAM3C,QCgCHR,eARS,SAACiC,GAAD,MAAuB,CAC9CkB,MAAOD,EAAgBjB,OAGG,SAACE,GAAD,MAAyB,CACnDiB,WAAY,kBAAMjB,EFvByBE,iBAAOU,QE0BpC/C,EA5BQ,SAAC,GAAkC,IAAhCmD,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,WAMhC,OALAvD,qBAAU,WACTuD,IACAC,OAAOC,SAAS,EAAG,KACjB,CAACF,IAECD,EAKJ,gCACC,kDACA,+DAC8BA,QAPxB,QCZM,oBACd,cAAC,IAAD,UACC,eAAC,IAAD,WACC,cAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,cAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,gBAAgBC,UAAWC,IAC7C,cAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,oBAAoBC,UAAWE,U,iDCL9CC,EAAsB,CAC3B1B,KAAM,iBCAP,IAAM0B,EAAsB,CAC3BpD,KAAM,M,YCPDqD,E,OAAWC,EAAMC,OAAO,CAC7BC,QAAS,0BACTC,QAAS,IACTC,QAAS,CAAE,eAAgB,sBAWbL,ICbFT,EAAa,kBAA8BU,EAAMK,IAAI,qEAAqEC,MAAK,SAACC,GAAD,OAASA,EAAI7D,S,WCKxI8D,G,WAUAC,GAVV,SAAUD,IAAV,uEAGS,OAHT,kBAGeE,YAAKpB,GAHpB,OAIL,OADMD,EAHD,gBAICsB,aRG0BjE,EQHS2C,ERI7Bd,iBAAOW,EAAqB,CAAExC,WQRrC,8BAML,OANK,mCAMCiE,aRIuBC,EQJnB,gBRKErC,iBAAOY,EAAkB,CAAEyB,YQXlC,kCRUuB,IAACA,EAHGlE,IQP3B,gBAUA,SAAU+D,IAAV,iEAEN,OAFM,SAEAI,YAAWC,EAA0BN,GAFrC,uC,eCbGO,GAAV,SAAUA,IAAV,iEAEC,OAFD,SAEOC,YAAI,CACTP,MAHF,uCCDeQ,kBAAgB,CAC9B7C,KNQc,WAA+E,IAA9DD,EAA6D,uDAA9C2B,EAAcvB,EAAgC,uCAC5F,OAAQA,EAAOQ,OACTmC,EACG,2BACH/C,GACAI,EAAO1C,SAGJsC,GMfTkB,MLQc,WAA4E,IAA3DlB,EAA0D,uDAA3C2B,EAAcvB,EAA6B,uCACzF,OAAQA,EAAOQ,MACd,KAAK+B,EACJ,OAAO,2BACH3C,GADJ,IAECzB,KAAM,OAER,KAAKoE,EACL,KAAKA,EACJ,OAAO,2BACH3C,GACAI,EAAO1C,SAEZ,QACC,OAAOsC,M,WMbAgD,GATJC,EAAiBC,cAGjBC,EAAoB/B,OAAegC,sCAAwCC,IAC3EC,EAAQC,YACbC,EACAL,EAAiBM,YAAgBR,KAGlC,SAAUD,IAAV,iEACC,OADD,SACOH,YAAI,CACTD,MAFF,uCAKAK,EAAeS,IAAIV,GAEJM,QCXAK,EANO,kBACrB,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACC,cAAC,EAAD,OCKkBM,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.7767133e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport mqtt, { MqttClient } from 'mqtt';\nimport { ArduinoData } from '../types';\nimport { transformArduinoData } from '../utils';\n\ninterface ReturnType {\n\tconnectStatus: string;\n\tpayload: string | null;\n\tclient: MqttClient | null;\n}\n\ninterface OptionsType {\n\tprotocol: 'tcp' | 'ws' | 'wss' | 'mqtts';\n\thost: string; // IP Address or URL\n\tport: number;\n\ttopic: string;\n}\n\nconst useMqttClient = ({\n\tprotocol, host, port, topic,\n}: OptionsType): ReturnType => {\n\tconst [client, setClient] = useState<MqttClient | null>(null);\n\tconst [connectStatus, setConnectStatus] = useState('Offline');\n\tconst [payload, setPayload] = useState<string | null>(null);\n\n\tuseEffect(() => {\n\t\tconst mqttClient = mqtt.connect(`${protocol}://${host}:${port}`);\n\t\tsetClient(mqttClient);\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (client) {\n\t\t\tlet connectionStatus = 0;\n\t\t\tclient.on('connect', () => {\n\t\t\t\tsetConnectStatus('Connected');\n\t\t\t\tconnectionStatus = 1;\n\t\t\t});\n\t\t\tclient.on('error', () => {\n\t\t\t\tclient.end();\n\t\t\t\tconnectionStatus = -1;\n\t\t\t});\n\t\t\tclient.on('reconnect', () => {\n\t\t\t\tsetConnectStatus('Reconnecting');\n\t\t\t\tconnectionStatus = 0;\n\t\t\t});\n\t\t\tclient.subscribe(topic);\n\t\t\tclient.on('message', (_, message) => {\n\t\t\t\tif (payload === message.toString()) return;\n\t\t\t\tsetPayload(message.toString());\n\t\t\t});\n\t\t}\n\t}, [client]);\n\n\treturn {\n\t\tconnectStatus,\n\t\tpayload,\n\t\tclient,\n\t};\n};\n\nexport default useMqttClient;\n","import { ArduinoData } from '../types';\n\nexport const transformArduinoData = (data: string): ArduinoData => {\n\t/** Transforms string data to float */\n\tconst numberData = data.split(',').map((item) => parseFloat(item));\n\n\t/** Transform numberData to arduinoData interface */\n\tconst arduinoData: ArduinoData = {\n\t\tangleX: numberData[0],\n\t\tangleY: numberData[1],\n\t\tangleZ: numberData[2],\n\t\tgpsLat: numberData[3],\n\t\tgpsLong: numberData[4],\n\t\tgpsSpeed: numberData[5],\n\t\ttyreTemp: numberData[6],\n\t\ttime: new Date().getTime(),\n\t};\n\n\treturn arduinoData;\n};\n\nexport default transformArduinoData;\n","import React, { useState, useEffect } from 'react';\nimport useMqttClient from '../../hooks/useMqttClient';\nimport transformArduinoData from '../../utils/transformArduinoData';\nimport { ArduinoData } from '../../types';\n\nconst Home = (): JSX.Element => {\n\tconst [dataArr, setDataArr] = useState<ArduinoData[]>([]);\n\n\tconst tempData = '3.000000,-1.625000,0.000000,0.000000,0.000000,0.000000,21.790003'; // Data from the Arduino (string)\n\n\tconst dataArray = tempData.split(',');\n\n\tconst dataJSON = {\n\t\ttime: Date.now(), // Date and time in UNIX format\n\t\tangle_x: dataArray[0],\n\t\tangle_y: dataArray[1],\n\t\tangle_z: dataArray[2],\n\t\tgps_lat: dataArray[3],\n\t\tgps_lon: dataArray[4],\n\t\tgps_speed: dataArray[5],\n\t\ttyre_temp: dataArray[6],\n\t};\n\n\tconst { connectStatus, payload } = useMqttClient({\n\t\thost: '210.6.106.70',\n\t\tprotocol: 'tcp',\n\t\tport: 9001,\n\t\ttopic: 'tcp/arduino_data',\n\t});\n\n\tuseEffect(() => {\n\t\tif (payload) {\n\t\t\tconst arduinoData = transformArduinoData(payload);\n\t\t\tsetDataArr([...dataArr, arduinoData]);\n\t\t}\n\t}, [payload]);\n\n\treturn (\n\t\t<>\n\t\t\t<h1>\n\t\t\t\tStatus:\n\t\t\t\t{/* {returnValue} */}\n\t\t\t\t{connectStatus}\n\t\t\t</h1>\n\t\t\t<h1>\n\t\t\t\tPayload:\n\t\t\t\t{payload}\n\t\t\t\t{/* {getDayArray} */}\n\t\t\t</h1>\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import { action } from 'typesafe-actions';\n\ninterface ActionType {\n\ttype: 'settings/SET_TEXT';\n\tpayload: { text: string; };\n}\n\nexport const SET_TEXT = 'settings/SET_TEXT';\n\nexport const setText = (text: string): ActionType => action(SET_TEXT, { text });\n","import { createSelector } from 'reselect';\nimport { RootState } from 'MyTypes';\nimport { State } from './reducer';\n\nexport const selectTextData = (state: RootState): State => state.text;\n\nexport const selectText = createSelector(\n\tselectTextData,\n\t(data) => data.text,\n);\n","import React, { ChangeEvent, useState } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from 'MyTypes';\nimport * as Actions from './duck/action';\nimport { selectText } from './duck/selector';\n\ninterface Props {\n\tsetText: (text: string) => void;\n\ttext: string;\n}\n\nconst ReduxSample = ({ setText, text }: Props) => {\n\tconst [input, setInput] = useState('');\n\n\tconst handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tsetInput(e.target.value);\n\t};\n\n\tconst handleClick = () => {\n\t\tsetText(input);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Redux Sample</h1>\n\t\t\t<p>\n\t\t\t\tCurrent State:\n\t\t\t\t{text}\n\t\t\t</p>\n\t\t\t<input onChange={handleInputChange} type=\"text\" />\n\t\t\t<button type=\"button\" onClick={handleClick}>\n\t\t\t\tUpdate Redux State\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => ({\n\ttext: selectText(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tsetText: (text: string) => dispatch(Actions.setText(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxSample);\n","import { action } from 'typesafe-actions';\n\ninterface ActionType {\n\ttype: 'datas/FETCH_DATAS' | 'datas/FETCH_DATAS_SUCCESS' | 'datas/FETCH_DATAS_FAIL';\n\tpayload?: {\n\t\tdata?: unknown;\n\t\terror?: string;\n\t};\n}\n\nexport const FETCH_DATAS = 'datas/FETCH_DATAS';\nexport const FETCH_DATAS_SUCCESS = 'datas/FETCH_DATAS_SUCCESS';\nexport const FETCH_DATAS_FAIL = 'datas/FETCH_DATAS_FAIL';\n\nexport const fetchDatas = (): ActionType => action(FETCH_DATAS);\nexport const fetchDatasSuccess = (data: unknown):\nActionType => action(FETCH_DATAS_SUCCESS, { data });\n\nexport const fetchDatasFail = (error: string):\nActionType => action(FETCH_DATAS_FAIL, { error });\n","import { createSelector } from 'reselect';\nimport { RootState } from 'MyTypes';\nimport { State } from './reducer';\n\nexport const selectDatas = (state: RootState): State => state.datas;\n\nexport const selectDatasData = createSelector(\n\tselectDatas,\n\t(datas) => datas.data,\n);\n","import React, { useEffect } from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from 'MyTypes';\nimport * as Actions from './duck/action';\nimport { selectDatasData } from './duck/selector';\n\ninterface Props {\n\tfetchDatas: () => void;\n\tdatas: unknown | null;\n}\n\nconst ReduxAPISample = ({ datas, fetchDatas }: Props) => {\n\tuseEffect(() => {\n\t\tfetchDatas();\n\t\twindow.scrollTo(0, 0);\n\t}, [fetchDatas]);\n\n\tif (!datas) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Redux API Sample</h1>\n\t\t\t<p>\n\t\t\t\t{`Fetched Data from state: ${datas}`}\n\t\t\t</p>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = (state: RootState) => ({\n\tdatas: selectDatasData(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n\tfetchDatas: () => dispatch(Actions.fetchDatas()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReduxAPISample);\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Home from '../pages/Home/Home';\nimport ReduxSample from '../pages/ReduxSample/ReduxSample';\nimport ReduxAPISample from '../pages/ReduxAPISample/ReduxAPISample';\n\nexport default (): JSX.Element => (\n\t<Router>\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Route exact path=\"/redux-sample\" component={ReduxSample} />\n\t\t\t<Route exact path=\"/redux-sample-api\" component={ReduxAPISample} />\n\t\t</Switch>\n\t</Router>\n);\n","import { ActionType } from 'typesafe-actions';\nimport * as SettingsActions from './action';\n\nexport interface State {\n\ttext: string;\n}\n\nconst initialState: State = {\n\ttext: 'initial state',\n};\n\ntype SettingsActions = ActionType<typeof SettingsActions>;\n\nexport default function reducer(state: State = initialState, action: SettingsActions): State {\n\tswitch (action.type) {\n\t\tcase SettingsActions.SET_TEXT:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import { ActionType } from 'typesafe-actions';\nimport * as DatasActions from './action';\n\nexport interface State {\n\tdata: unknown;\n\terror?: string;\n}\n\nconst initialState: State = {\n\tdata: null,\n};\n\ntype DatasActions = ActionType<typeof DatasActions>;\n\nexport default function reducer(state: State = initialState, action: DatasActions): State {\n\tswitch (action.type) {\n\t\tcase DatasActions.FETCH_DATAS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdata: null,\n\t\t\t};\n\t\tcase DatasActions.FETCH_DATAS_SUCCESS:\n\t\tcase DatasActions.FETCH_DATAS_FAIL:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t...action.payload,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n\tbaseURL: 'https://www.random.org/',\n\ttimeout: 5000,\n\theaders: { 'Content-Type': 'application/json' },\n});\n\nexport const setToken = (token: string): void => {\n\tinstance.defaults.headers.common['x-access-token'] = token;\n};\n\nexport const setLang = (lang: string): void => {\n\tinstance.defaults.headers.common['x-language'] = lang;\n};\n\nexport default instance;\n","import { AxiosResponse } from 'axios';\nimport axios from './axios';\n\nexport const fetchDatas = (): Promise<AxiosResponse> => axios.get('/integers/?num=1&min=1&max=100&col=1&base=10&format=plain&rnd=new').then((res) => res.data);\n\nexport const postSample = (name: string, result: string): Promise<AxiosResponse> => axios.post('v2/dinner/missions', { name, result });\n","import {\n\tput, takeLatest, call, ForkEffect, CallEffect, PutEffect,\n} from 'redux-saga/effects';\nimport { AxiosResponse } from 'axios';\nimport { Action } from 'typesafe-actions';\nimport * as DatasActions from './action';\nimport { fetchDatas } from '../../../api';\n\nexport function* handleFetchDatas():\nGenerator<CallEffect<AxiosResponse> | PutEffect<Action<string>>, void, unknown> {\n\ttry {\n\t\tconst datas = yield call(fetchDatas);\n\t\tyield put(DatasActions.fetchDatasSuccess(datas));\n\t} catch (error) {\n\t\tyield put(DatasActions.fetchDatasFail(`${error}`));\n\t}\n}\n\nexport function* watchFetchDatas():\nGenerator<ForkEffect<never>, void, unknown> {\n\tyield takeLatest(DatasActions.FETCH_DATAS, handleFetchDatas);\n}\n","import { all, AllEffect, ForkEffect } from 'redux-saga/effects';\nimport DatasReducer from './duck/reducer';\nimport ReduxAPISample from './ReduxAPISample';\nimport { watchFetchDatas } from './duck/saga';\n\nfunction* DatasSaga():\nGenerator<AllEffect<Generator<ForkEffect<never>, void, unknown>>, void, unknown> {\n\tyield all([\n\t\twatchFetchDatas(),\n\t]);\n}\n\nexport {\n\tDatasSaga,\n\tDatasReducer,\n\tReduxAPISample,\n};\n","import { combineReducers } from 'redux';\nimport { TextReducer } from '../pages/ReduxSample';\nimport { DatasReducer } from '../pages/ReduxAPISample';\n\nexport default combineReducers({\n\ttext: TextReducer,\n\tdatas: DatasReducer,\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport { all } from 'redux-saga/effects';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from './reducer';\nimport { DatasSaga } from '../pages/ReduxAPISample';\n\nconst sagaMiddleware = createSagaMiddleware();\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n\treducer,\n\tcomposeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nfunction* rootSaga() {\n\tyield all([\n\t\tDatasSaga(),\n\t]);\n}\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport MainRouter from './router';\nimport store from './store';\n\nconst App: React.FC = () => (\n\t<Provider store={store}>\n\t\t<MainRouter />\n\t</Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}